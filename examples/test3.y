%{
#include <iostream>

int yylex();
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%start block

%type <val> block statement assign_statament value identifier 
%type <val> number boolean string char digit letter;

%%

block: '{' statement* '}';

statement: assign_statament;

assign_statament: "let" identifier '=' (value || identifier) ';';

value: number | boolean | string;

identifier: (letter||'_')(digit||letter||'_')+;

number: ['-'||'+'] digit+ [('.'digit+)];

boolean: "true" | "false";

string: '"' char* '"' | '\'' char* '\'';

char: digit | letter | '_' | '+' | '-' | '/' | '?';

digit: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

letter: 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g';

%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}
